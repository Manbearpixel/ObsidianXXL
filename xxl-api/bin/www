#!/usr/bin/env node

// *** main dependencies *** //
let models  = require('../models');
let api     = require('../api');
let debug   = require('debug')('_example:server');
let http    = require('http');

/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '3000');
api.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.createServer(api);

/**
 * Listen on provided port, on all network interfaces.
 * Synchronize with Sequelize
 */
models.sequelize.sync().then(function() {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  // named pipe
  if (isNaN(port)) { return val; }

  // port number
  if (port >= 0) { return port; }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  console.log(`Debug Mode :: ${process.env.ODN_DEBUG}`);
}
